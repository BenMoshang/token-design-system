@use '../primitive/p-spacing-scale' as primitive-spacing;
@use 'sass:map';

// ==========================================================================
// SEMANTIC SPACING VARIABLES
// ==========================================================================
// These variables provide a more abstract, intent-based way to use spacing.
// They map to the generated values from the primitive spacing scale.
//
// You can define multiple sets of semantic variables if needed, perhaps
// one using the 'default' scale and another using the 'compact' scale,
// or choose one scale to be the primary source for semantic values.

// For simplicity, these examples will primarily use the 'default' scale.
// You can expand this to create a more comprehensive semantic layer.

// --- General Purpose Spacing --- 
// Based on the default spacing scale
$space-xxs: map.get(primitive-spacing.$SPACING_VALUES_DEFAULT, 25) !default;    // e.g., ~0.56rem
$space-xs: map.get(primitive-spacing.$SPACING_VALUES_DEFAULT, 50) !default;     // e.g., ~0.75rem
$space-sm: map.get(primitive-spacing.$SPACING_VALUES_DEFAULT, 100) !default;    // e.g., 1rem (base)
$space-md: map.get(primitive-spacing.$SPACING_VALUES_DEFAULT, 200) !default;    // e.g., ~1.33rem
$space-lg: map.get(primitive-spacing.$SPACING_VALUES_DEFAULT, 300) !default;    // e.g., ~1.78rem
$space-xl: map.get(primitive-spacing.$SPACING_VALUES_DEFAULT, 400) !default;    // e.g., ~2.37rem
$space-xxl: map.get(primitive-spacing.$SPACING_VALUES_DEFAULT, 600) !default;   // e.g., ~3.15rem
$space-xxxl: map.get(primitive-spacing.$SPACING_VALUES_DEFAULT, 800) !default;  // e.g., ~4.20rem

// --- Component-Specific or Layout Spacing (Examples) ---
// It's good practice to name these based on their application or intent.

// Inset padding for components like cards or panels
$space-inset-xs: $space-xs !default;
$space-inset-sm: $space-sm !default;
$space-inset-md: $space-md !default;
$space-inset-lg: $space-lg !default;

// Stack spacing for vertical rhythm between elements
$space-stack-xs: $space-xs !default;
$space-stack-sm: $space-sm !default;
$space-stack-md: $space-md !default;
$space-stack-lg: $space-lg !default;

// Inline spacing for horizontal gaps between elements
$space-inline-xs: $space-xs !default;
$space-inline-sm: $space-sm !default;
$space-inline-md: $space-md !default;
$space-inline-lg: $space-lg !default;

// --- Spacing using the 'compact' scale (Example) ---
// You could prefix these or use a different naming scheme if you need both scales semantically.
// $space-compact-sm: map.get(primitive-spacing.$SPACING_VALUES_COMPACT, 100) !default; // e.g., 0.875rem

// ==========================================================================
// SEMANTIC SPACING MIXINS (Optional Examples)
// ==========================================================================
// Mixins can provide utility for applying common spacing patterns.

/**
 * Applies padding to all sides of an element.
 * @param {String | Number} $size-key - A key from the spacing map (e.g., 'sm', 'md') or a direct spacing value.
 */
@mixin apply-padding($size-key) {
  $_value: $size-key;
  @if map.has-key(primitive-spacing.$SPACING_VALUES_DEFAULT, $size-key) {
    $_value: map.get(primitive-spacing.$SPACING_VALUES_DEFAULT, $size-key);
  } @else if meta.type-of($size-key) == string and map.has-key($GLOBALS, $size-key) {
    // Fallback to a global variable if defined elsewhere (hypothetical)
    // $_value: map.get($GLOBALS, $size-key); 
  } @else if meta.type-of($size-key) != 'number' {
    @warn "Invalid size key '#{$size-key}' for apply-padding. It's not a direct value or a known key.";
  }
  padding: $_value;
}

/**
 * Applies margin to all sides of an element.
 * @param {String | Number} $size-key - A key from the spacing map (e.g., 'sm', 'md') or a direct spacing value.
 */
@mixin apply-margin($size-key) {
  $_value: $size-key;
  @if map.has-key(primitive-spacing.$SPACING_VALUES_DEFAULT, $size-key) {
    $_value: map.get(primitive-spacing.$SPACING_VALUES_DEFAULT, $size-key);
  } @else if meta.type-of($size-key) != 'number' {
     @warn "Invalid size key '#{$size-key}' for apply-margin. It's not a direct value or a known key.";
  }
  margin: $_value;
}

// Add more mixins as needed, e.g., for vertical/horizontal padding/margin,
// responsive spacing, etc.

// ==========================================================================
//   END OF SEMANTIC SPACING SETUP
// ==========================================================================

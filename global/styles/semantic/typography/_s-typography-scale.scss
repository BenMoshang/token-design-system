// _typography-semantic-responsive.scss

@use 'sass:map';
@use 'sass:meta';

// Import the base typography scales which define $FONT_SIZES_MOBILE, $FONT_SIZES_DESKTOP.
// Adjust the path if these files are in different directories.
@use './typography-base' as base;

// Import the clamp utility.
// Ensure this path correctly leads to your utility file containing the create-clamp function.
@use '../utils/responsive-functions' as u_clamp; // Provides u_clamp.create-clamp()

/* ==========================================================================
   SEMANTIC RESPONSIVE (CLAMPED) FONT SIZE MAP
   ==========================================================================
   Generates a map of responsive font sizes using CSS clamp().
   These sizes fluidly transition between mobile and desktop scales based on
   values from _typography-base.scss.
--------------------------------------------------------------------------- */

// 1) Semantic Font Size Definitions
// ---------------------------------------------------------------------------
// Map semantic names to the scale keys (e.g., '100', '700') from the
// base.$FONT_SIZES_MOBILE and base.$FONT_SIZES_DESKTOP maps.
$_SEMANTIC_FONT_MAPPINGS: (
  Display 1:
    (
      mobile: 700,
      desktop: 700,
    ),
  // Step 6
  Display 2:
    (
      mobile: 600,
      desktop: 600,
    ),
  // Step 5
  Title A:
    (
      mobile: 500,
      desktop: 500,
    ),
  // Step 4
  Title B:
    (
      mobile: 400,
      desktop: 400,
    ),
  // Step 3
  Title C:
    (
      mobile: 300,
      desktop: 300,
    ),
  // Step 2
  Heading:
    (
      mobile: 400,
      desktop: 400,
    ),
  // Step 3 (same as Title B by default)
  Subheading:
    (
      mobile: 200,
      desktop: 200,
    ),
  // Step 1
  Body:
    (
      mobile: 100,
      desktop: 100,
    ),
  // Step 0 (base)
  Callout:
    (
      mobile: 200,
      desktop: 200,
    ),
  // Step 1 (can differentiate by weight/style)
  Label:
    (
      mobile: 50,
      desktop: 50,
    ),
  // Step -0.5
  Caption:
    (
      mobile: 50,
      desktop: 50,
    ),
  // Step -0.5
  Overline:
    (
      mobile: 25,
      desktop: 25,
    ),
  // Step -0.75
) !default;

// 2) Viewport Configuration for Clamp Function
// ---------------------------------------------------------------------------
// Define the viewport range (in rem) for fluid scaling.
$_CLAMP_MIN_VIEWPORT: glob_vars.$PAGE_MIN_INLINE !default; // Approx 320px
$_CLAMP_MAX_VIEWPORT: glob_vars.$PAGE_MAX_INLINE !default;

// 3) Generated Responsive Font Sizes Map
// ---------------------------------------------------------------------------
// This map will store semantic names as keys and clamp() strings as values.
$RESPONSIVE_FONT_SIZES: () !default;

@each $semantic-name, $keys in $_SEMANTIC_FONT_MAPPINGS {
  $mobile-scale-key: map.get($keys, mobile);
  $desktop-scale-key: map.get($keys, desktop);

  // Retrieve the actual rem values from the static font size maps from _typography-base.scss
  $min-font-size-val: map.get(base.$FONT_SIZES_MOBILE, $mobile-scale-key);
  $max-font-size-val: map.get(base.$FONT_SIZES_DESKTOP, $desktop-scale-key);

  @if $min-font-size-val == null {
    @warn "SemanticResponsiveFonts: Mobile font size for key '#{$mobile-scale-key}' (semantic: '#{$semantic-name}') not found in base.$FONT_SIZES_MOBILE. Skipping responsive style for '#{$semantic-name}'.";
  } @else if $max-font-size-val == null {
    @warn "SemanticResponsiveFonts: Desktop font size for key '#{$desktop-scale-key}' (semantic: '#{$semantic-name}') not found in base.$FONT_SIZES_DESKTOP. Skipping responsive style for '#{$semantic-name}'.";
  } @else {
    // Generate the clamp() string using the helper function
    // The u_clamp.create-clamp function will validate if min > max and other parameters.
    $clamped-font-size-string: u_clamp.create-clamp(
      $min-size: $min-font-size-val,
      $max-size: $max-font-size-val,
      $min-content: $_CLAMP_MIN_VIEWPORT,
      $max-content: $_CLAMP_MAX_VIEWPORT,
    );

    // Add to the responsive font sizes map
    $RESPONSIVE_FONT_SIZES: map.merge(
      $RESPONSIVE_FONT_SIZES,
      (
        $semantic-name: $clamped-font-size-string,
      )
    );
  }
}

@mixin apply-text-preset($semantic-style-name) {
  @if map.has-key($RESPONSIVE_FONT_SIZES, $semantic-style-name) {
    font-size: map.get($RESPONSIVE_FONT_SIZES, $semantic-style-name);
    // Note: To apply responsive line-heights, you would need a similar
    // $RESPONSIVE_LINE_HEIGHTS map and include it here.
  } @else {
    @warn "Semantic typography style '#{$semantic-style-name}' not found in $RESPONSIVE_FONT_SIZES.";
  }
}
